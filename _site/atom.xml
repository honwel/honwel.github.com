<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Hong Wei's Personal Website</title>
 <link href="http://www.honwel.net/atom.xml" rel="self"/>
 <link href="http://www.honwel.net"/>
 <updated>2013-09-04T11:40:13+08:00</updated>
 <id>http://www.honwel.net</id>
 <author>
   <name>honwel</name>
   <email>ishonwel@gmail.com</email>
 </author>

 
 <entry>
   <title>用Nginx做正向代理时获取其向外连接的IP和端口</title>
   <link href="http://www.honwel.net/2013/09/04/get-port-of-nginx.md.html"/>
   <updated>2013-09-04T00:00:00+08:00</updated>
   <id>http://www.honwel.net/2013/09/04/get-port-of-nginx.md</id>
   <content type="html">

有时候你可能需要知道Nginx向外连接时用了哪个端口，这些端口是当connect(ngx_event_connect.c - ngx_event_connect_peer(ngx_peer_connection_t \*pc))时是由系统自动分配的。

Nginx作为正向代理，我们需要获取的时它向外连接时的IP和端口，IP很好获取，可从Nginx系统变量里面获得，而且不会改变，但是端口是有系统分配的，Nginx本身也没有现成的变量可用。

到这里你可能首先想到的是，为什么要获取这个端口，这个端口信息基本没有意义，也许它可以作为回溯系统分析中数据的一部分。

我们将设置一个新的变量$upstream_laddr, 日志中可以用它打印出来。这个变量在ngx_http_upstram.c 中设置，其ngx_http_variable_t结构中的get_handler函数为：

		static ngx_int_t ngx_http_upstream_laddr_variable(ngx_http_request_t \*r, ngx_http_variable_value_t \*v, uintptr_t data) {

		ngx_peer_connection_t \*pc; 
		struct sockaddr_in \*sin; 
		u_char sa\[NGX_SOCKADDRLEN\]; 
		socklen_t len; 
		#if (NGX_HAVE_INET6) 
		ngx_uint_t i; 
		struct sockaddr_in6 \*sin6; 
		#endif

		ngx_str_t s; 
		u_char addr\[NGX_SOCKADDR_STRLEN\];

		s.len = NGX_SOCKADDR_STRLEN; 
		s.data = addr;

		if (r-&gt;upstream == NULL) { return NGX_ERROR; }

		pc = &amp;r-&gt;upstream-&gt;peer; 
		if (pc == NULL){ return NGX_ERROR; } 
		if (pc-&gt;local_sockaddr == NULL) { return NGX_ERROR;} \/\* 需要去ngx_peer_connection_t 结构中添加local_sockaddr变量 \*\/

		s.len = ngx_sock_ntop(pc-&gt;local_sockaddr, s.data, s.len, 1);

		s.data = ngx_pnalloc(r-&gt;pool, s.len); if (s.data == NULL) { return NGX_ERROR; }

		ngx_memcpy(s.data, addr, s.len);

		v-&gt;len = s.len; 
		v-&gt;valid = 1; 
		v-&gt;no_cacheable = 0; 
		v-&gt;not_found = 0; 
		v-&gt;data = s.data;

		return NGX_OK; 
		} 
		
同时，在 ngx_event_connect_peer(ngx_peer_connection_t \*pc) 连接后要通过getsockname函数获得IP信息，并存储在local_sockaddr变量中，像这样：

			if (getsockname(c-&gt;fd, (struct sockaddr \*) &amp;sa, &amp;len) == -1) {
    			ngx_connection_error(c, ngx_socket_errno, &quot;getsockname() failed&quot;);
        	return NGX_ERROR;
    	}

    	c-&gt;local_sockaddr = ngx_palloc(c-&gt;pool, len);
    	if (c-&gt;local_sockaddr == NULL) {
        	return NGX_ERROR;
    	}

    	ngx_memcpy(c-&gt;local_sockaddr, &amp;sa, len);
  
这段代码你需要加入在ngx_event_connect_peer执行之后，为了了解Nginx的upstream 执行的顺利，下面有一张不太严谨的流程图可以参考：

所以你可以加在ngx_http_upstream_connect执行之后。最后你可以直接在配置文件中使用变量$upstream_laddr了。
</content>
 </entry>
 
 <entry>
   <title>用Nginx做正向代理时获取其向外连接的IP和端口</title>
   <link href="http://www.honwel.net/2013/09/04/get-port-of-nginx.html"/>
   <updated>2013-09-04T00:00:00+08:00</updated>
   <id>http://www.honwel.net/2013/09/04/get-port-of-nginx</id>
   <content type="html">&lt;p&gt;有时候你可能需要知道Nginx向外连接时用了哪个端口，这些端口是当connect(ngx_event_connect.c - ngx_event_connect_peer(ngx_peer_connection_t *pc))时是由系统自动分配的。&lt;/p&gt;

&lt;p&gt;Nginx作为正向代理，我们需要获取的时它向外连接时的IP和端口，IP很好获取，可从Nginx系统变量里面获得，而且不会改变，但是端口是有系统分配的，Nginx本身也没有现成的变量可用。&lt;/p&gt;

&lt;p&gt;到这里你可能首先想到的是，为什么要获取这个端口，这个端口信息基本没有意义，也许它可以作为回溯系统分析中数据的一部分。&lt;/p&gt;

&lt;p&gt;我们将设置一个新的变量$upstream_laddr, 日志中可以用它打印出来。这个变量在ngx_http_upstram.c 中设置，其ngx_http_variable_t结构中的get_handler函数为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	static ngx_int_t ngx_http_upstream_laddr_variable(ngx_http_request_t \*r, ngx_http_variable_value_t \*v, uintptr_t data) {

	ngx_peer_connection_t \*pc; 
	struct sockaddr_in \*sin; 
	u_char sa\[NGX_SOCKADDRLEN\]; 
	socklen_t len; 
	#if (NGX_HAVE_INET6) 
	ngx_uint_t i; 
	struct sockaddr_in6 \*sin6; 
	#endif

	ngx_str_t s; 
	u_char addr\[NGX_SOCKADDR_STRLEN\];

	s.len = NGX_SOCKADDR_STRLEN; 
	s.data = addr;

	if (r-&amp;gt;upstream == NULL) { return NGX_ERROR; }

	pc = &amp;amp;r-&amp;gt;upstream-&amp;gt;peer; 
	if (pc == NULL){ return NGX_ERROR; } 
	if (pc-&amp;gt;local_sockaddr == NULL) { return NGX_ERROR;} \/\* 需要去ngx_peer_connection_t 结构中添加local_sockaddr变量 \*\/

	s.len = ngx_sock_ntop(pc-&amp;gt;local_sockaddr, s.data, s.len, 1);

	s.data = ngx_pnalloc(r-&amp;gt;pool, s.len); if (s.data == NULL) { return NGX_ERROR; }

	ngx_memcpy(s.data, addr, s.len);

	v-&amp;gt;len = s.len; 
	v-&amp;gt;valid = 1; 
	v-&amp;gt;no_cacheable = 0; 
	v-&amp;gt;not_found = 0; 
	v-&amp;gt;data = s.data;

	return NGX_OK; 
	} &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同时，在 ngx_event_connect_peer(ngx_peer_connection_t *pc) 连接后要通过getsockname函数获得IP信息，并存储在local_sockaddr变量中，像这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;		if (getsockname(c-&amp;gt;fd, (struct sockaddr \*) &amp;amp;sa, &amp;amp;len) == -1) {
			ngx_connection_error(c, ngx_socket_errno, &amp;quot;getsockname() failed&amp;quot;);
    	return NGX_ERROR;
	}

	c-&amp;gt;local_sockaddr = ngx_palloc(c-&amp;gt;pool, len);
	if (c-&amp;gt;local_sockaddr == NULL) {
    	return NGX_ERROR;
	}

	ngx_memcpy(c-&amp;gt;local_sockaddr, &amp;amp;sa, len);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码你需要加入在ngx_event_connect_peer执行之后，为了了解Nginx的upstream 执行的顺利，下面有一张不太严谨的流程图可以参考：&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#39;nginx 请求流程图&#39; src=&#39;http://www.honwel.net/assets/images/upstream-nginx.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;所以你可以加在ngx_http_upstream_connect执行之后。最后你可以直接在配置文件中使用变量$upstream_laddr了。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>重新记录博客</title>
   <link href="http://www.honwel.net/2013/08/28/reborn.html"/>
   <updated>2013-08-28T00:00:00+08:00</updated>
   <id>http://www.honwel.net/2013/08/28/reborn</id>
   <content type="html">&lt;p&gt;12年5月用Wordpress搭建了一个博客，选用了某个国内的空间，但是各方面服务不是很好，而且我更新的频率不高，所以一直想重新“选址”，包括更换域名。&lt;/p&gt;

&lt;p&gt;正好最近使用Git时，发现Github.com上能提供项目的Pages功能，方便个人搭建博客，我立即试了一试，当然碰到了很多问题，之间断断续续的进行搭建过程，由于全部是从零开始，包括jekyll,Git等，走了不少弯路，其实要搭建起博客的时间非常短，也许就10分钟，但要搭建一个比较满意的博客，或者说要“知其所以然”，那么花的时间就因人而异了。&lt;/p&gt;

&lt;p&gt;在Github.com上搭建博客有很多好处，对我来说最好的就是不用再去备案了，这个以往是很麻烦的；另外博客的自由度也很大，对于喜欢动手的人来说是个不错的选择。&lt;/p&gt;

&lt;p&gt;我会在这里持续耕耘，“尽一分之心力，必有一分之补益”。&lt;/p&gt;</content>
 </entry>
 
 
</feed>
